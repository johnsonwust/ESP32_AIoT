"use strict";(self.webpackChunkesp_32_s_3_aiot_starter_kit=self.webpackChunkesp_32_s_3_aiot_starter_kit||[]).push([[2505],{226:(t,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>e,toc:()=>f});const e=JSON.parse('{"id":"example/easy/light-sensor-code","title":"light-sensor-code","description":"","source":"@site/docs/example/easy/light-sensor-code.mdx","sourceDirName":"example/easy","slug":"/example/easy/light-sensor-code","permalink":"/docs/example/easy/light-sensor-code","draft":false,"unlisted":false,"editUrl":"https://github.com/johnsonwust/ESP32_AIoT/tree/gh-pages/docs/example/easy/light-sensor-code.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"exampleSidebar","previous":{"title":"\u539f\u7406","permalink":"/docs/example/easy/dht11-principle"},"next":{"title":"\u539f\u7406","permalink":"/docs/example/easy/light-sensor-principle"}}');var o=r(4848),s=r(8453);const i={},l=void 0,a={},f=[];function c(t){const n={code:"code",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'\r\n#include <Adafruit_GFX.h>    // \u6838\u5fc3\u56fe\u5f62\u5e93\r\n#include <Adafruit_ST7789.h> // ST7789\u786c\u4ef6\u7279\u5b9a\u7684\u5e93\r\n#include <SPI.h>              // SPI\u5e93\r\n\r\n// ST7789 \u5c4f\u5e55\u63a7\u5236\u5f15\u811a\u5b9a\u4e49\r\n#define TFT_CS    44  // \u9009\u62e9\u4fe1\u53f7\u5f15\u811a\r\n#define TFT_RST   -1  // \u590d\u4f4d\u5f15\u811a\r\n#define TFT_DC    43  // \u6570\u636e/\u547d\u4ee4\u9009\u62e9\u5f15\u811a\r\n#define TFT_MOSI  47  // \u6570\u636e\u8f93\u51fa\r\n#define TFT_SCLK  21  // \u65f6\u949f\u8f93\u51fa\r\n\r\nAdafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);\r\n\r\n// \u7535\u4f4d\u5668\u8fde\u63a5\u7684 ADC \u5f15\u811a\r\nconst int potPin = 13;\r\n\r\n// \u4e0a\u6b21\u7684 ADC \u6570\u503c\r\nint lastAdcValue = -1;\r\n\r\n// \u53d8\u5316\u9608\u503c\uff0c\u53ea\u6709\u5f53 ADC \u6570\u503c\u53d8\u5316\u8d85\u8fc7\u8be5\u9608\u503c\u65f6\u624d\u66f4\u65b0\u5c4f\u5e55\r\nconst int threshold = 10;  // \u9608\u503c\u8bbe\u5b9a\u4e3a 10\uff08\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\uff09\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n\r\n  // \u521d\u59cb\u5316 ST7789 \u5c4f\u5e55\r\n  tft.init(240, 240);  // \u521d\u59cb\u5316 240x240 \u5206\u8fa8\u7387\u7684 ST7789 \u5c4f\u5e55\r\n  tft.setRotation(2);  // \u8bbe\u7f6e\u5c4f\u5e55\u65cb\u8f6c\u89d2\u5ea6\u4e3a 2\uff0890\u5ea6\uff09\r\n\r\n  // \u6e05\u7a7a\u5c4f\u5e55\u5e76\u8bbe\u7f6e\u80cc\u666f\u989c\u8272\r\n  tft.fillScreen(ST77XX_BLACK);\r\n\r\n  // \u542f\u7528 UTF8 \u652f\u6301\u5e76\u8bbe\u7f6e\u5b57\u4f53\r\n  tft.setTextColor(ST77XX_WHITE);  // \u8bbe\u7f6e\u6587\u672c\u989c\u8272\u4e3a\u767d\u8272\r\n  tft.setTextSize(2);              // \u8bbe\u7f6e\u5b57\u4f53\u5927\u5c0f\r\n\r\n  // \u8bbe\u7f6e ADC \u8bfb\u53d6\u5206\u8fa8\u7387\u4e3a 12 \u4f4d\uff08ESP32 \u9ed8\u8ba4\u4e3a 12 \u4f4d\uff09\r\n  analogReadResolution(12);\r\n\r\n  // \u663e\u793a\u8fde\u63a5\u7684 ADC \u5f15\u811a\u4fe1\u606f\r\n  tft.setTextColor(ST77XX_CYAN);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u9752\u8272\r\n  tft.setTextSize(2);              // \u8bbe\u7f6e\u5b57\u4f53\u5927\u5c0f\r\n  tft.setCursor(10, 10);           // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n  tft.println("ADC Pin: GPIO13");\r\n}\r\n\r\nvoid clearLine(int yPos, int length) {\r\n  tft.setCursor(10, yPos);\r\n  for (int i = 0; i < length; i++) {\r\n    tft.print(" ");  // \u6253\u5370\u7a7a\u683c\u6e05\u9664\u4e0a\u4e00\u884c\u7684\u6587\u672c\r\n  }\r\n}\r\n\r\nvoid loop() {\r\n  // \u4ece\u7535\u4f4d\u5668\u5f15\u811a\u8bfb\u53d6 ADC \u6570\u503c\uff0c\u8303\u56f4 0~4095\r\n  int adcValue = analogRead(potPin);\r\n\r\n  // \u5982\u679c ADC \u6570\u503c\u4e0e\u4e0a\u6b21\u503c\u53d8\u5316\u8d85\u8fc7\u9608\u503c\uff0c\u5219\u66f4\u65b0\u663e\u793a\r\n  if (abs(adcValue - lastAdcValue) > threshold) {\r\n    // \u5c06 ADC \u6570\u503c\u8f6c\u6362\u4e3a\u7535\u538b\u503c\uff1a0\uff5e4095 \u5bf9\u5e94 0\uff5e3.3V\r\n    float voltage = adcValue * (3.3 / 4095.0);\r\n\r\n    // \u5c06 ADC \u6570\u503c\u6620\u5c04\u5230 0\uff5e270 \u5ea6\u8303\u56f4\r\n    float angle = (adcValue * 270.0) / 4095.0;\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a ADC \u8303\u56f4\r\n    tft.fillRect(0, 40, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_YELLOW);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u9ec4\u8272\r\n    tft.setCursor(10, 40);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("ADC Range: 0 - 4095");\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a ADC \u6570\u503c\r\n    tft.fillRect(0, 60, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_WHITE);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u767d\u8272\r\n    tft.setCursor(10, 60);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("ADC Value: ");\r\n    tft.println(adcValue);\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a\u7535\u538b\u8303\u56f4\r\n    tft.fillRect(0, 90, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_GREEN);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u7eff\u8272\r\n    tft.setCursor(10, 90);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("Volt Range: 0-3.3V");\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a\u7535\u538b\u503c\r\n    tft.fillRect(0, 110, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_WHITE);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u767d\u8272\r\n    tft.setCursor(10, 110);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("Voltage: ");\r\n    tft.print(voltage, 2);  // \u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\r\n    tft.println(" V");\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a\u89d2\u5ea6\u8303\u56f4\r\n    tft.fillRect(0, 140, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_MAGENTA);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u54c1\u7ea2\u8272\r\n    tft.setCursor(10, 140);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("Angle Range: 0-270");\r\n\r\n    // \u6e05\u7a7a\u5e76\u66f4\u65b0\u663e\u793a\u89d2\u5ea6\u503c\r\n    tft.fillRect(0, 160, 240, 20, ST77XX_BLACK);  // \u6e05\u7a7a\u4e0a\u4e00\u884c\u663e\u793a\u7684\u5185\u5bb9\r\n    tft.setTextColor(ST77XX_WHITE);  // \u8bbe\u7f6e\u5b57\u4f53\u989c\u8272\u4e3a\u767d\u8272\r\n    tft.setCursor(10, 160);  // \u8bbe\u7f6e\u5149\u6807\u4f4d\u7f6e\r\n    tft.print("Angle: ");\r\n    tft.print(angle, 1);     // \u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570\r\n    tft.println(" deg");\r\n\r\n    // \u4fdd\u5b58\u5f53\u524d ADC \u6570\u503c\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u4e0e\u5176\u6bd4\u8f83\r\n    lastAdcValue = adcValue;\r\n  }\r\n\r\n  // \u5ef6\u65f6 200 \u6beb\u79d2\uff0c\u4fbf\u4e8e\u89c2\u5bdf\u6570\u503c\u53d8\u5316\r\n  delay(200);\r\n}\r\n\n'})})}function d(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},8453:(t,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var e=r(6540);const o={},s=e.createContext(o);function i(t){const n=e.useContext(s);return e.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),e.createElement(s.Provider,{value:n},t.children)}}}]);