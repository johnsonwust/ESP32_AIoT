"use strict";(self.webpackChunkesp_32_s_3_aiot_starter_kit=self.webpackChunkesp_32_s_3_aiot_starter_kit||[]).push([[3474],{412:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"example/easy/dht11-code","title":"dht11-code","description":"alt text","source":"@site/docs/example/easy/dht11-code.md","sourceDirName":"example/easy","slug":"/example/easy/dht11-code","permalink":"/docs/example/easy/dht11-code","draft":false,"unlisted":false,"editUrl":"https://github.com/johnsonwust/ESP32_AIoT/tree/gh-pages/docs/example/easy/dht11-code.md","tags":[],"version":"current","frontMatter":{},"sidebar":"exampleSidebar","previous":{"title":"\u539f\u7406","permalink":"/docs/example/easy/potentiometer-principle"},"next":{"title":"\u539f\u7406","permalink":"/docs/example/easy/dht11-principle"}}');var a=t(4848),s=t(8453);const o={},i=void 0,c={},d=[];function l(e){const r={code:"code",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.p,{children:(0,a.jsx)(r.img,{alt:"alt text",src:t(4759).A+"",width:"2160",height:"2592"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-cpp",children:'\r\n/**\r\n * DHT11 Temperature Reader\r\n * This sketch reads temperature data from the DHT11 sensor and prints the value to the serial port.\r\n * It also handles potential error states that might occur during reading.\r\n *\r\n * Author: Dhruba Saha\r\n * Version: 2.1.0\r\n * License: MIT\r\n */\r\n\r\n// Include the DHT11 library for interfacing with the sensor.\r\n#include <DHT11.h>\r\n\r\n// Create an instance of the DHT11 class.\r\n// - For Arduino: Connect the sensor to Digital I/O Pin 2.\r\n// - For ESP32: Connect the sensor to pin GPIO2 or P2.\r\n// - For ESP8266: Connect the sensor to GPIO2 or D4.\r\nDHT11 dht11(6);\r\n\r\nvoid setup() {\r\n    // Initialize serial communication to allow debugging and data readout.\r\n    // Using a baud rate of 9600 bps.\r\n    Serial.begin(9600);\r\n    \r\n    // Uncomment the line below to set a custom delay between sensor readings (in milliseconds).\r\n    // dht11.setDelay(500); // Set this to the desired delay. Default is 500ms.\r\n}\r\n\r\nvoid loop() {\r\n    // Attempt to read the temperature value from the DHT11 sensor.\r\n    int temperature = dht11.readTemperature();\r\n\r\n    // Check the result of the reading.\r\n    // If there\'s no error, print the temperature value.\r\n    // If there\'s an error, print the appropriate error message.\r\n    if (temperature != DHT11::ERROR_CHECKSUM && temperature != DHT11::ERROR_TIMEOUT) {\r\n        Serial.print("Temperature: ");\r\n        Serial.print(temperature);\r\n        Serial.println(" \xb0C");\r\n    } else {\r\n        // Print error message based on the error code.\r\n        Serial.println(DHT11::getErrorString(temperature));\r\n    }\r\n}\r\n\r\n\n'})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},4759:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/DHT11-74fe151d83a7645ee30147d4b37cc57c.png"},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);