"use strict";(self.webpackChunkesp_32_s_3_aiot_starter_kit=self.webpackChunkesp_32_s_3_aiot_starter_kit||[]).push([[4987],{7773:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"example/intermediate/encoder-code","title":"encoder-code","description":"","source":"@site/docs/example/intermediate/encoder-code.mdx","sourceDirName":"example/intermediate","slug":"/example/intermediate/encoder-code","permalink":"/docs/example/intermediate/encoder-code","draft":false,"unlisted":false,"editUrl":"https://github.com/johnsonwust/ESP32_AIoT/tree/gh-pages/docs/example/intermediate/encoder-code.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"exampleSidebar","previous":{"title":"\u539f\u7406","permalink":"/docs/example/intermediate/mq2-principle"},"next":{"title":"\u539f\u7406","permalink":"/docs/example/intermediate/encoder-principle"}}');var o=t(4848),i=t(8453);const a={},c=void 0,l={},d=[];function s(n){const e={code:"code",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:'\r\n#include <Arduino.h>\r\n#include <ESP_Knob.h>\r\n\r\n#define GPIO_NUM_KNOB_PIN_A     5\r\n#define GPIO_NUM_KNOB_PIN_B     4\r\n\r\nESP_Knob *knob;\r\n\r\nvoid onKnobLeftEventCallback(int count, void *usr_data)\r\n{\r\n    Serial.printf("Detect left event, count is %d\\n", count);\r\n}\r\n\r\nvoid onKnobRightEventCallback(int count, void *usr_data)\r\n{\r\n    Serial.printf("Detect right event, count is %d\\n", count);\r\n}\r\n\r\nvoid onKnobHighLimitEventCallback(int count, void *usr_data)\r\n{\r\n    Serial.printf("Detect high limit event, count is %d\\n", count);\r\n}\r\n\r\nvoid onKnobLowLimitEventCallback(int count, void *usr_data)\r\n{\r\n    Serial.printf("Detect low limit event, count is %d\\n", count);\r\n}\r\n\r\nvoid onKnobZeroEventCallback(int count, void *usr_data)\r\n{\r\n    Serial.printf("Detect zero event, count is %d\\n", count);\r\n}\r\n\r\nvoid setup() {\r\n    Serial.begin(115200);\r\n    Serial.println("ESP_Knob example");\r\n\r\n    knob = new ESP_Knob(GPIO_NUM_KNOB_PIN_A, GPIO_NUM_KNOB_PIN_B);\r\n\r\n    // knob->invertDirection();\r\n    knob->begin();\r\n    knob->attachLeftEventCallback(onKnobLeftEventCallback);\r\n    knob->attachRightEventCallback(onKnobRightEventCallback);\r\n    knob->attachHighLimitEventCallback(onKnobHighLimitEventCallback);\r\n    knob->attachLowLimitEventCallback(onKnobLowLimitEventCallback);\r\n    knob->attachZeroEventCallback(onKnobZeroEventCallback);\r\n}\r\n\r\nvoid loop() {\r\n    delay(1000);\r\n}\r\n\r\n\n'})})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(s,{...n})}):s(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var r=t(6540);const o={},i=r.createContext(o);function a(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);